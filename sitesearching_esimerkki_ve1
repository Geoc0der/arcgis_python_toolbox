'''
Tässä koodi, jonka tavoite on tehdä yhdelle lähtö- ja syötetasolle summarize within-analyysi ja sen jälkeen laskea
koodisarakkeeseen koodi annettujen parametrien perusteella.
'''

import arcpy

class Toolbox(object):
    def __init__(self):
        """Define the toolbox (the name of the toolbox is the name of the
        .pyt file)."""
        self.label = "Site search sw, osuus ja koodi yhdelle aineistolle"
        self.alias = "Site search sw, osuus ja koodi yhdelle aineistolle"
        # List of tool classes associated with this toolbox
        self.tools = [Tool]

class Tool(object):
    def __init__(self):
        """Define the tool (tool name is the name of the class)."""
        self.label = "Site search sw, osuus ja koodi yhdelle aineistolle"
        self.description = ""
        self.canRunInBackground = False

    def getParameterInfo(self):
        """Define parameter definitions"""
        params = [
            arcpy.Parameter(displayName="Input Grid Layer",
                            name="input_grid_layer",
                            datatype="GPFeatureLayer",
                            parameterType="Required",
                            direction="Input"),
            arcpy.Parameter(displayName="Input Data Layer",
                            name="input_data_layer",
                            datatype="GPFeatureLayer",
                            parameterType="Required",
                            direction="Input"), 
            arcpy.Parameter(displayName="Input Treshold Value",
                            name="input_treshold",
                            datatype="GPLong",
                            parameterType="Required",
                            direction="Input"),          
            arcpy.Parameter(displayName="Output feature class",
                            name="output",
                            datatype="DEFeatureClass",
                            parameterType="Required",
                            direction="Output")
       ]
        return params

    def isLicensed(self):
        """Set whether tool is licensed to execute."""
        return True

    def updateParameters(self, parameters):
        """Modify the values and properties of parameters before internal
        validation is performed.  This method is called whenever a parameter
        has been changed."""
        return

    def updateMessages(self, parameters):
        """Modify the messages created by internal validation for each tool
        parameter.  This method is called after internal validation."""
        return

    def execute(self, parameters, messages):
        """The source code of the tool."""
        input_grid = parameters[0].valueAsText
        input_data = parameters[1].valueAsText
        input_value = parameters[2].valueAsText
        output = parameters[3].valueAsText

        # Summarize within-analyysi
        arcpy.analysis.SummarizeWithin(input_grid,input_data,output,shape_unit='SQUAREMETERS')

        # Lisätään treshold input sarakkeeseen
        arcpy.management.CalculateField(output,'treshold',input_value)

        # Osuuden laskeminen
        os_expression = '!sum_Area_SQUAREMETERS!/!Shape_Area!*100'
        arcpy.management.CalculateField(output,'osuus',os_expression)

        # Koodin määrittely
        koodi_expression = 'palauta_koodi(!osuus!,!treshold!)'
        code_block = '''
def palauta_koodi(p1,p2):
    if p1 > p2:
        return 1
    else:
        return 2
'''
        arcpy.management.CalculateField(output,'koodi',koodi_expression,'PYTHON3',code_block,"LONG")
             
    def postExecute(self, parameters):
        '''This method takes place after outputs are processed and
        added to the display.'''
        return
